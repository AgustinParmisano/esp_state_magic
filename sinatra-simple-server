require 'bundler'
require 'json'
require 'rubygems'
require 'sinatra/base'
require 'mongo'
require 'json/ext' # required for .to_json
require 'sinatra/cross_origin'
Bundler.require

elektron_ip =  0
elektron_time = 0
elektron_name = 0
elektron_data = 0


#TESTING ANGULAR
register Sinatra::CrossOrigin

configure do
  db = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'test')
  set :mongo_db, db[:test]
  set :allow_origin, :any
  set :allow_methods, [:get, :post]
  set :allow_credentials, true
end

get '/tom' do
  cross_origin

  p  '[{id: 0, name: "Aire acondicionado", deseg: "Prioridad maxima", face: "img/150x165/anoop-kumar.png" }, {id: 1, name: "Lavarropas", deseg: "Prioridad media", face: "img/150x165/vijay-kumar.png"}, {id: 2, name: "Ventiladores", deseg: "Prioridad minima", face: "img/150x165/durgesh-soni.png"}]'
end


get '/' do
   redirect to("/elektron")
end

get '/elektron' do
  "Elektron" + "\nIP is " + elektron_ip.to_s + "\nTime is " + elektron_time.to_s + "\nName is " + elektron_name.to_s + "\nData is " + elektron_data.to_s
end

post '/elektronsends' do
  request.body.rewind
  data = JSON.parse request.body.read

  time1 = Time.new

  elektron_ip = data['ip']
  elektron_time = time1.inspect
  data['time'] = elektron_time
  elektron_name = data['name']
  elektron_data = data['data']


  "Hello #{data['name']}!"

  db = settings.mongo_db
  result = db.insert_one data
  db.find(:_id => result.inserted_id).to_a.first.to_json
  time1.inspect

end

#Data Base

# list all documents in the test collection
get '/documents/?' do
  content_type :json
  settings.mongo_db.find.to_a.to_json
end

# find a document by its ID
get '/document/:id/?' do
  content_type :json
  document_by_id(params[:id])
end

# insert a new document from the request parameters,
# then return the full document
post '/new_document/?' do
  content_type :json
  db = settings.mongo_db
  result = db.insert_one params
  db.find(:_id => result.inserted_id).to_a.first.to_json
end

# update the document specified by :id, setting its
# contents to params, then return the full document
put '/update/:id/?' do
  content_type :json
  id = object_id(params[:id])
  settings.mongo_db.find(:_id => id).
    find_one_and_update('$set' => request.params)
  document_by_id(id)
end

# update the document specified by :id, setting just its
# name attribute to params[:name], then return the full
# document
put '/update_name/:id/?' do
  content_type :json
  id   = object_id(params[:id])
  name = params[:name]
  settings.mongo_db.find(:_id => id).
    find_one_and_update('$set' => {:name => name})
  document_by_id(id)
end

# delete the specified document and return success
delete '/remove/:id' do
  content_type :json
  db = settings.mongo_db
  id = object_id(params[:id])
  documents = db.find(:_id => id)
  if !documents.to_a.first.nil?
    documents.find_one_and_delete
    {:success => true}.to_json
  else
    {:success => false}.to_json
  end
end
